@import '_variables.scss';

// load Modules
@import 'gridbox-position';

/* Avoid accident click event caused by finger touch */
a,
area,
button,
[role="button"],
input,
label,
select,
// summary,
textarea {
  -ms-touch-action: manipulation;
      touch-action: manipulation;
}


// /* =======================================================================
//  *                       Form input Containers Classes
//  * -----------------------------------------------------------------------
//  * Description:    used to wrap the form input elements
//  * -----------------------------------------------------------------------
//  * Ussage:         see below
//  * ========================================================================
//  */

// <form> element
// Main Usage:
// (a). margin bottom: use to seperate forms if multiple forms stack on 
//      each other, margin bottom is 0 if the only form or last form    
// (b). border: assign custom border color

form {
    width: 100%;
    // padding: 15px;
    // margin-bottom: 15px;
    // background: #fff;
    color: $fontColor;
    // border: 4px solid rgba(0, 0, 0, 0.1);
    border-bottom: none;

    &:last-child {
        margin-bottom: none;
        // border-bottom: 4px solid rgba(0, 0, 0, 0.1);
    }
}

// .form-group
// Description: used to wrap the form input element, and assign a 
//              margin bottom value
// Main Usage:
// (a). margin bottom: use to seperate forms if multiple forms stack on 
//      each other, margin bottom is 0 if the only form or last form    
// (b). can also used together with .row class, to give child elements
//      flex grid properties

.form-group {
    position: relative;
    width: 100%;
}

// .form-field
// Description: similar as .form-group, mainly used to wrap the <fliedset> 
//              element, and assign a margin bottom value
//              
// Main Usage:  same as .form-group

.form-field {
    @extend .form-group;
    border: 1px solid rgba(0, 0, 0, 0.15); 
    border-left: none;
}

// /* =======================================================================
//  *                           Form input Control
//  * -----------------------------------------------------------------------
//  * Description:    used to control the style of form input element,
//  *                 normalize the font size, line-height, and assigne
//  *                 a custom border color, also applied a transition
//  *                 effect when focused
//  *                  (a). can be used as a block level element, 100% width.
//  *                  (b). can be used with a grid class, ex: col-1 to act
//  *                       like a flex grid. (need to wrap by .row or similar
//  *                       classes.
//  * -----------------------------------------------------------------------
//  * Ussage:      applied to Form input such as <input>, <textarea>, 
//  *              <option>, <checkbox>, etc
//  * ========================================================================
//  */

.form-input {
    display: block;
    position: relative;
    width: 100%;
    padding: 0.5rem 0.75rem;
    color: $fontColor;
    font-size: $inputFontSize;
    line-height: $inputLineHeight;
    border: 1px solid $border;  
    transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.25s;

    &:focus {
        border-color: $information;
        box-shadow: 1px 1px 2px $boxShadow;
        outline: none;
    }

    &::placeholder {
        color: $disabled;
    }
}

// Form Checkbox
// Description: set a larger space between the checkbox and text
// Usage: applied to <input> element only with a typle of checkbox, ex: <input type="checkbox" class="form-check">
// NOTE:  it's important to wrap input with this class by a <label> with a .label-inline class
.form-check {
    margin-right: 0.25rem;
}

// Textarea
// Description: only allow vertical resize, horizontal size can be styled by using a grid class, ex: col-3
textarea {
    overflow: auto;
    resize: vertical;
}

// /* =======================================================================
//  *                          Select Element, <select>
//  * -----------------------------------------------------------------------
//  * Description:    the <select> element is displayed differently with
//  *                 different browsers, so we try to normalize it by remove
//  *                 the appearance property (to remove the browser default 
//  *                 carret), and use a customized carret. So we create a
//  *                 wrapper (.singleSelectoWrapper or .multiSelectWrapper)
//  *                 to contain the <select> and .caret element.
//  *
//  *                 Since <select> has single or multiple options, so we 
//  *                 create .singleSelectoWrapper and .multiSelectWrapper
//  *                 respectively
//  * -----------------------------------------------------------------------
//  * Ussage:         see below
//  * ========================================================================
//  */

// overwrite the default <select> styling
select {
    display: block;
    -webkit-appearance: none;  
    -moz-appearance: none;
    appearance: none;
    border-radius: 0;
    background: transparent !important;
    z-index: 2; // make it top layer

    &:hover {
        cursor: pointer;
    }
}

// .singleSelectoWrapper and .multiSelectWrapper
// Description: the wrapper element for <select>          
// Main Usage:  apply to a <div>, can also be used with grid class, ex: col-3

.singleSelectWrapper {
    position: relative;
    overflow: auto;
    z-index: 1;

    //.caret
    //Description: the custom caret
    //Main Usage: applied to the <span> sibling of the <select>
    .caret {
        display: block;
        position: absolute;
        width: 3px;
        height: 3px;
        top: 21px; // !!hard coded, inline element has a height of 42px
        right: 1rem;
        border-top: 0.3rem solid $caretColor;
        border-right: 0.3rem solid transparent;
        border-left: 0.3rem solid transparent;
        transform: translateY(-50%);
        z-index: 1; 
    }

    .single-select {
        padding-right: 3rem;
    }
}

.multiSelectWrapper {
    @extend .singleSelectWrapper;

    .multi-select {
        max-height: 3rem;

        option {
            padding: 0.5rem 0;
            border-bottom: 1px solid $border;
    
            &:first-child {
                margin-top: -0.5rem;
            }
    
            &:last-child {
                margin-bottom: -0.5rem;
                border-bottom: none;
            }
        }
    }
}

// /* =======================================================================
//  *                  Labeling Class, <label> and <legend>
//  * -----------------------------------------------------------------------
//  * Description:    two classes associated with the <label> element, 
//  *                  (a) .label-col
//  *                  (b) .label-inline
//  *                 they are indentical, just make the name more self
//  *                 descriptive. The two classes will normalize the size
//  *                 of <label> with element has .form-input class for a
//  *                 proper aligning result
//  * -----------------------------------------------------------------------
//  * Ussage:         (a) .label-col: applied to <label> with a grid class
//  *                 (b) .label-inline: applied to block level <label>
//  * ========================================================================
//  */

.label {
    display: inline-block;
    padding-top: calc(0.5rem + 1px); // add 1px to paddng because .form-input element has 1px border
    padding-right: 0.75rem;
    padding-bottom: calc(0.5rem + 1px); // add 1px to paddng because .form-input element has 1px border
    padding-left: 0;
    font-size: $inputFontSize;
    line-height: $inputLineHeight;
}

// Disabled Input
// Description: used if <label> is used to wrap the .form-input element
// Usage: apply to <label> if <label> wraps input element
//        or apply to elements with .form-input class directly
.disabled {
    color: $disabled;
    cursor: not-allowed;
}

legend {
    padding: 0.5rem 1.5rem 0.5rem 0;
    // margin-bottom: 15px;
}

// /* =======================================================================
//  *                          Button Styling
//  * -----------------------------------------------------------------------
//  * Description:    Remove the browser default styling, and apply gridbox
//  *                 button styling. Also provide button color options
//  *                  (a) .btn-primary
//  *                  (b) .btn-secondary
//  *                  (c) .btn-success
//  *                  (d) .btn-warning
//  *                  (e) .btn-danger
//  *                  (f) .btn-info
//  * -----------------------------------------------------------------------
//  * Ussage:         Can be applied to the belowing elements
//  *                 (a) <button class="btn btn-parimary">
//  *                 (b) <a class="btn btn-parimary">
//  * ========================================================================
//  */

// Global button setting
button {
    // Remove browser default styling
    -webkit-appearance: none;
    -moz-appearance: none;

    &.btn {
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        box-shadow: $btnDefaultBoxShadow;
        transition: background-color ease-in-out 0.15s, border-color ease-in-out 0.15s;
    
        &:hover,
        &:focus,
        &:active {
            outline: none;
            cursor: pointer;
        }

        &:active {
            box-shadow: $btnInsetBoxShadow;
            transform: translate(1px, 1px);
        }
    }
}

// Applied to <a> element
a {
    display: inline-block;

    &.btn {
        @extend button.btn;
    }   
}

// Primary Button Setting
.btn-primary {
    color: #fff;
    background-color: $information;
    border: 1px solid $information;

    &:hover,
    &:active {
        background-color: $informationDarker;
        border-color: $informationDarker;
    }
}

// Secondary Button Setting
// Description: use to primary background color for hover and active state
.btn-secondary {
    color: $information;
    background-color: #fff;
    border: 1px solid $information;

    &:hover,
    &:active {
        color: #fff;
        background-color: $informationDarker;
        border-color: $informationDarker;
    }
}

// Success Button Setting
.btn-success {
    color: #fff;
    background-color: $success;
    border: 1px solid $success;

    &:hover,
    &:active {
        color: #fff;
        background-color: $successDarker;
        border-color: $successDarker;
    }
}

// Warning Button Setting
.btn-warning {
    color: #fff;
    background-color: $warning;
    border: 1px solid $warning;

    &:hover,
    &:active {
        color: #fff;
        background-color: $warningDarker;
        border-color: $warningDarker;
    }
}

// Danger Button Setting
.btn-danger {
    color: #fff;
    background-color: $danger;
    border: 1px solid $danger;

    &:hover,
    &:active {
        color: #fff;
        background-color: $dangerDarker;
        border-color: $dangerDarker;
    }
}

// /* =======================================================================
//  *                        Custom Form Checkbox
//  * -----------------------------------------------------------------------
//  * Description:    Fake the checkbox by using fontawesome icons,
//  *                 hidden the defualt the checkbox. It has two states:
//  *                  (a) :checked
//  *                  (b) :focus
//  *                 This is a general css rule, feel free to use differnt
//  *                 icons provided by fontawesome. We provided two examples
//  *                  (1) checkbox type
//  *                  (2) radio type
//  * -----------------------------------------------------------------------
//  * Ussage:         Must use the HTML template, or using the same nesting
//  *                 rule
//  * ========================================================================
//  */

.custom-form-check {
    display: inline-block;
    position: relative;
    min-height: 1.5rem;
    line-height: $fontLineHeight;
    vertical-align: middle;

    &:hover {
        cursor: pointer;
    }

    // when disabled
    &.disabled {
        color: $disabled;
        cursor: not-allowed;

        .custom-for-check-icon-alt {
            border-color: $disabled;
        }        
    }

    // No-animated Check Icon
    .custom-form-check-icon {
        display: inline-block;
        position: relative;
        margin-right: 0.25rem;
        
        .custom-form-check-icon-unchecked {
            display: inline-block;
            position: relative;
            line-height: $fontLineHeight;

            i {
                line-height: $fontLineHeight;
            }
        }
        
        .custom-form-check-icon-checked {
            position: absolute;
            top: 0;
            left: 0;
            line-height: $fontLineHeight;
            opacity: 0;
            
            i {
                line-height: $fontLineHeight;
            }         
        }
    }

    // Animated Check Icon
    .custom-for-check-icon-alt {
        display: block;
        position: absolute;
        width: 1.1rem;
        height: 1.1rem;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border-radius: 4px;
        border: 2px solid #000;

        // Set left margin only when sbling has .custom-for-check-icon-alt class
        & + span.custom-form-check-content {
            margin-left: 1.5rem;
        }

        // -------------- Insrt Custom Animation Style for UNCHECKED State ---------------
        &.outter-glow {
            &::before {
                content: "";
                display: inline-block;
                position: absolute;
                width: 1.3rem;
                height: 1.3rem;
                top: 0;
                left: 0;
                opacity: 0;
                transform: translate(calc(-0.1rem - 2px), calc(-0.1rem - 2px));
                border-radius: 4px;        
                border: 2px solid $information;
                box-shadow: 0 0 5px $information;
                transition: opacity ease-in 0.2s, box-shadow ease-in 0.2s;
            }
        }

        &.inner-fill {
            // No css rule for unchecked state
        }

        i {
            position: absolute;
            font-size: 0.6rem;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            opacity: 0;
            transition: opacity ease-in 0.2s;
        }
    }

    .custom-form-check-content {
        display: inline-block;
        position: relative;
        line-height: $fontLineHeight;
    }

    .hidden-default-check {
        position: absolute;
        left: 0.75rem;
        pointer-events: none;
        user-select: none;
        opacity: 0;
        z-index: -1;

        // No-animated Check Icon
        &:checked + span .custom-form-check-icon-unchecked {
            opacity: 0;
        }      
        &:checked + span .custom-form-check-icon-checked {
            opacity: 1;
        }
        &:focus + span .custom-form-check-icon-unchecked {
            color: $information;
        }    
        &:focus:checked + span .custom-form-check-icon-checked {
            color: $information;
        }

        // Animate Check Icon
        // Toggle Checkmark
        &:checked + .custom-for-check-icon-alt i {
            opacity: 1;
        }

        // -------------- Insrt Custom Animation Style for CHECKED State ---------------
        // ------ Style: Outter Glow --------
        // when focus
        &:focus + .outter-glow::before {
            opacity: 1;
        }
        // when focus and checked
        &:focus:checked + .outter-glow::before {
            opacity: 1;
        }

        // ------ Style: Inner Fill --------
        /* when focus */
        &:focus + .inner-fill,
        &:focus:active + .inner-fill {
            background: #000;
        }
        /* when focus and checked */
        &:focus:checked + .inner-fill i {
            color: #fff;
            background: #000;
        }

    }
}





